// <auto-generated />
using System;
using AddressBook.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AddressBook.DataAccess.Migrations
{
    [DbContext(typeof(AddressBookContext))]
    partial class AddressBookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Appartment")
                        .HasColumnType("integer")
                        .HasColumnName("appartment");

                    b.Property<int>("Building")
                        .HasColumnType("integer")
                        .HasColumnName("building");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("ZipCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("zip_code_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("ZipCodeId")
                        .HasDatabaseName("ix_address_zip_code_id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_city_country_id");

                    b.HasIndex("StateId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_city_state_id_name");

                    b.ToTable("city");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_contact");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasDatabaseName("ix_contact_address_id");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.HasIndex("Name", "Code")
                        .IsUnique()
                        .HasDatabaseName("ix_country_name_code");

                    b.ToTable("country");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<byte>("PhoneType")
                        .HasColumnType("smallint")
                        .HasColumnName("phone_type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_phone_number");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_phone_number_contact_id");

                    b.ToTable("phone_number");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_state");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_state_country_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_state_name");

                    b.ToTable("state");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.ZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.HasKey("Id")
                        .HasName("pk_zip_code");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_zip_code_city_id");

                    b.HasIndex("StateId")
                        .HasDatabaseName("ix_zip_code_state_id");

                    b.HasIndex("CountryId", "StateId", "CityId", "Code")
                        .IsUnique()
                        .HasDatabaseName("ix_zip_code_country_id_state_id_city_id_code");

                    b.ToTable("zip_code");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Address", b =>
                {
                    b.HasOne("AddressBook.DataAccess.Entities.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ZipCodeId")
                        .HasConstraintName("fk_address_zip_code_zip_code_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.City", b =>
                {
                    b.HasOne("AddressBook.DataAccess.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_city_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBook.DataAccess.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .HasConstraintName("fk_city_state_state_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Contact", b =>
                {
                    b.HasOne("AddressBook.DataAccess.Entities.Address", "Address")
                        .WithOne("Contact")
                        .HasForeignKey("AddressBook.DataAccess.Entities.Contact", "AddressId")
                        .HasConstraintName("fk_contact_address_address_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.PhoneNumber", b =>
                {
                    b.HasOne("AddressBook.DataAccess.Entities.Contact", "Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_phone_number_contact_contact_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.State", b =>
                {
                    b.HasOne("AddressBook.DataAccess.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_state_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.ZipCode", b =>
                {
                    b.HasOne("AddressBook.DataAccess.Entities.City", "City")
                        .WithMany("ZipCodes")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_zip_code_city_city_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBook.DataAccess.Entities.Country", "Country")
                        .WithMany("ZipCodes")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_zip_code_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBook.DataAccess.Entities.State", "State")
                        .WithMany("ZipCodes")
                        .HasForeignKey("StateId")
                        .HasConstraintName("fk_zip_code_state_state_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Address", b =>
                {
                    b.Navigation("Contact");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.City", b =>
                {
                    b.Navigation("ZipCodes");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Contact", b =>
                {
                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("States");

                    b.Navigation("ZipCodes");
                });

            modelBuilder.Entity("AddressBook.DataAccess.Entities.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("ZipCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
